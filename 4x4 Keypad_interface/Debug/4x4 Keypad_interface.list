
4x4 Keypad_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f74  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08001138  08001138  00011138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800125c  0800125c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800125c  0800125c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800125c  0800125c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800125c  0800125c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080012c8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080012c8  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bd1  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000366  00000000  00000000  00020c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00020fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  000210f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002892  00000000  00000000  000211d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011cf  00000000  00000000  00023a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000093b4  00000000  00000000  00024c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002dfed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a44  00000000  00000000  0002e040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001120 	.word	0x08001120

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001120 	.word	0x08001120

08000204 <delay>:
#if !defined(_SOFT_FP) && defined(_ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(int T)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	int i;
	while(T--)
 800020c:	e009      	b.n	8000222 <delay+0x1e>
	{
	for(i=0;i<1000;i++);
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delay+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000220:	dbf8      	blt.n	8000214 <delay+0x10>
	while(T--)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	1e5a      	subs	r2, r3, #1
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d1f0      	bne.n	800020e <delay+0xa>
	}
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
	...

0800023c <main>:


int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af00      	add	r7, sp, #0
	uint32_t *portcMODER =(uint32_t *)0x40020800;
 8000242:	4b8f      	ldr	r3, [pc, #572]	; (8000480 <main+0x244>)
 8000244:	617b      	str	r3, [r7, #20]
	uint32_t *portcAHB1ENR =(uint32_t *)0x40023830;
 8000246:	4b8f      	ldr	r3, [pc, #572]	; (8000484 <main+0x248>)
 8000248:	613b      	str	r3, [r7, #16]
	uint32_t *portcIDR =(uint32_t *)0x40020810;
 800024a:	4b8f      	ldr	r3, [pc, #572]	; (8000488 <main+0x24c>)
 800024c:	60fb      	str	r3, [r7, #12]
	uint32_t *portcODR =(uint32_t *)0x40020814;
 800024e:	4b8f      	ldr	r3, [pc, #572]	; (800048c <main+0x250>)
 8000250:	60bb      	str	r3, [r7, #8]

	uint32_t *portcPUPDR =(uint32_t *)0x4002080c;
 8000252:	4b8f      	ldr	r3, [pc, #572]	; (8000490 <main+0x254>)
 8000254:	607b      	str	r3, [r7, #4]
	//Enable the Peripheral clock for GPIOC

	//rows-pc0-pc3=output
	//columns-pc4-pc7=input

	*portcAHB1ENR |= 0x4;
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 0204 	orr.w	r2, r3, #4
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	601a      	str	r2, [r3, #0]
	*portcMODER |= 0x55;
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	601a      	str	r2, [r3, #0]
	*portcPUPDR |= 0x5500;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f443 42aa 	orr.w	r2, r3, #21760	; 0x5500
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]


	while(1)
	{
		//Make R1 low
		*portcODR |= 0x0f;
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f043 020f 	orr.w	r2, r3, #15
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<0);
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f023 0201 	bic.w	r2, r3, #1
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0310 	and.w	r3, r3, #16
 800029a:	2b00      	cmp	r3, #0
 800029c:	d106      	bne.n	80002ac <main+0x70>
		{
			delay(1000);
 800029e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a2:	f7ff ffaf 	bl	8000204 <delay>
			printf("1 pressed\n");
 80002a6:	487b      	ldr	r0, [pc, #492]	; (8000494 <main+0x258>)
 80002a8:	f000 faaa 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f003 0320 	and.w	r3, r3, #32
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <main+0x8a>
		{
			delay(1000);
 80002b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002bc:	f7ff ffa2 	bl	8000204 <delay>
			printf("2 pressed\n");
 80002c0:	4875      	ldr	r0, [pc, #468]	; (8000498 <main+0x25c>)
 80002c2:	f000 fa9d 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d106      	bne.n	80002e0 <main+0xa4>
		{
			delay(1000);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f7ff ff95 	bl	8000204 <delay>
			printf("3 pressed\n");
 80002da:	4870      	ldr	r0, [pc, #448]	; (800049c <main+0x260>)
 80002dc:	f000 fa90 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d106      	bne.n	80002fa <main+0xbe>
		{
			delay(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f0:	f7ff ff88 	bl	8000204 <delay>
			printf("A pressed\n");
 80002f4:	486a      	ldr	r0, [pc, #424]	; (80004a0 <main+0x264>)
 80002f6:	f000 fa83 	bl	8000800 <puts>
		}
		*portcODR |= 0x0f;
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f043 020f 	orr.w	r2, r3, #15
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<1);
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f023 0202 	bic.w	r2, r3, #2
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0310 	and.w	r3, r3, #16
 800031a:	2b00      	cmp	r3, #0
 800031c:	d106      	bne.n	800032c <main+0xf0>
		{
			delay(1000);
 800031e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000322:	f7ff ff6f 	bl	8000204 <delay>
			printf("4 pressed\n");
 8000326:	485f      	ldr	r0, [pc, #380]	; (80004a4 <main+0x268>)
 8000328:	f000 fa6a 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d106      	bne.n	8000346 <main+0x10a>
		{
			delay(1000);
 8000338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033c:	f7ff ff62 	bl	8000204 <delay>
			printf("5 pressed\n");
 8000340:	4859      	ldr	r0, [pc, #356]	; (80004a8 <main+0x26c>)
 8000342:	f000 fa5d 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800034e:	2b00      	cmp	r3, #0
 8000350:	d106      	bne.n	8000360 <main+0x124>
		{
			delay(1000);
 8000352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000356:	f7ff ff55 	bl	8000204 <delay>
			printf("6 pressed\n");
 800035a:	4854      	ldr	r0, [pc, #336]	; (80004ac <main+0x270>)
 800035c:	f000 fa50 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000368:	2b00      	cmp	r3, #0
 800036a:	d106      	bne.n	800037a <main+0x13e>
		{
			delay(1000);
 800036c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000370:	f7ff ff48 	bl	8000204 <delay>
			printf("B pressed\n");
 8000374:	484e      	ldr	r0, [pc, #312]	; (80004b0 <main+0x274>)
 8000376:	f000 fa43 	bl	8000800 <puts>
		}
		*portcODR |= 0x0f;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f043 020f 	orr.w	r2, r3, #15
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<2);
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f023 0204 	bic.w	r2, r3, #4
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f003 0310 	and.w	r3, r3, #16
 800039a:	2b00      	cmp	r3, #0
 800039c:	d106      	bne.n	80003ac <main+0x170>
		{
			delay(1000);
 800039e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a2:	f7ff ff2f 	bl	8000204 <delay>
			printf("7 pressed\n");
 80003a6:	4843      	ldr	r0, [pc, #268]	; (80004b4 <main+0x278>)
 80003a8:	f000 fa2a 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 0320 	and.w	r3, r3, #32
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d106      	bne.n	80003c6 <main+0x18a>
		{
			delay(1000);
 80003b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003bc:	f7ff ff22 	bl	8000204 <delay>
			printf("8 pressed\n");
 80003c0:	483d      	ldr	r0, [pc, #244]	; (80004b8 <main+0x27c>)
 80003c2:	f000 fa1d 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d106      	bne.n	80003e0 <main+0x1a4>
		{
			delay(1000);
 80003d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d6:	f7ff ff15 	bl	8000204 <delay>
			printf("9 pressed\n");
 80003da:	4838      	ldr	r0, [pc, #224]	; (80004bc <main+0x280>)
 80003dc:	f000 fa10 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d106      	bne.n	80003fa <main+0x1be>
		{
			delay(1000);
 80003ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f0:	f7ff ff08 	bl	8000204 <delay>
			printf("C pressed\n");
 80003f4:	4832      	ldr	r0, [pc, #200]	; (80004c0 <main+0x284>)
 80003f6:	f000 fa03 	bl	8000800 <puts>
		}
		*portcODR |= 0x0f;
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f043 020f 	orr.w	r2, r3, #15
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<3);
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f023 0208 	bic.w	r2, r3, #8
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	601a      	str	r2, [r3, #0]
		if(!(*portcIDR & (1<<4)))
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f003 0310 	and.w	r3, r3, #16
 800041a:	2b00      	cmp	r3, #0
 800041c:	d106      	bne.n	800042c <main+0x1f0>
		{
			delay(1000);
 800041e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000422:	f7ff feef 	bl	8000204 <delay>
			printf("* pressed\n");
 8000426:	4827      	ldr	r0, [pc, #156]	; (80004c4 <main+0x288>)
 8000428:	f000 f9ea 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<5)))
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f003 0320 	and.w	r3, r3, #32
 8000434:	2b00      	cmp	r3, #0
 8000436:	d106      	bne.n	8000446 <main+0x20a>
		{
			delay(1000);
 8000438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800043c:	f7ff fee2 	bl	8000204 <delay>
			printf("0 pressed\n");
 8000440:	4821      	ldr	r0, [pc, #132]	; (80004c8 <main+0x28c>)
 8000442:	f000 f9dd 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<6)))
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800044e:	2b00      	cmp	r3, #0
 8000450:	d106      	bne.n	8000460 <main+0x224>
		{
			delay(1000);
 8000452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000456:	f7ff fed5 	bl	8000204 <delay>
			printf("# pressed\n");
 800045a:	481c      	ldr	r0, [pc, #112]	; (80004cc <main+0x290>)
 800045c:	f000 f9d0 	bl	8000800 <puts>
		}
		if(!(*portcIDR & (1<<7)))
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000468:	2b00      	cmp	r3, #0
 800046a:	f47f af06 	bne.w	800027a <main+0x3e>
		{
			delay(1000);
 800046e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000472:	f7ff fec7 	bl	8000204 <delay>
			printf("D pressed\n");
 8000476:	4816      	ldr	r0, [pc, #88]	; (80004d0 <main+0x294>)
 8000478:	f000 f9c2 	bl	8000800 <puts>
		*portcODR |= 0x0f;
 800047c:	e6fd      	b.n	800027a <main+0x3e>
 800047e:	bf00      	nop
 8000480:	40020800 	.word	0x40020800
 8000484:	40023830 	.word	0x40023830
 8000488:	40020810 	.word	0x40020810
 800048c:	40020814 	.word	0x40020814
 8000490:	4002080c 	.word	0x4002080c
 8000494:	08001138 	.word	0x08001138
 8000498:	08001144 	.word	0x08001144
 800049c:	08001150 	.word	0x08001150
 80004a0:	0800115c 	.word	0x0800115c
 80004a4:	08001168 	.word	0x08001168
 80004a8:	08001174 	.word	0x08001174
 80004ac:	08001180 	.word	0x08001180
 80004b0:	0800118c 	.word	0x0800118c
 80004b4:	08001198 	.word	0x08001198
 80004b8:	080011a4 	.word	0x080011a4
 80004bc:	080011b0 	.word	0x080011b0
 80004c0:	080011bc 	.word	0x080011bc
 80004c4:	080011c8 	.word	0x080011c8
 80004c8:	080011d4 	.word	0x080011d4
 80004cc:	080011e0 	.word	0x080011e0
 80004d0:	080011ec 	.word	0x080011ec

080004d4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <ITM_SendChar+0x48>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <ITM_SendChar+0x48>)
 80004e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <ITM_SendChar+0x4c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <ITM_SendChar+0x4c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004f6:	bf00      	nop
 80004f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f8      	beq.n	80004f8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000506:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	6013      	str	r3, [r2, #0]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000edfc 	.word	0xe000edfc
 8000520:	e0000e00 	.word	0xe0000e00

08000524 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	e00a      	b.n	800054c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000536:	f3af 8000 	nop.w
 800053a:	4601      	mov	r1, r0
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	60ba      	str	r2, [r7, #8]
 8000542:	b2ca      	uxtb	r2, r1
 8000544:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbf0      	blt.n	8000536 <_read+0x12>
  }

  return len;
 8000554:	687b      	ldr	r3, [r7, #4]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b086      	sub	sp, #24
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	e009      	b.n	8000584 <_write+0x26>
  {
  //  __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	60ba      	str	r2, [r7, #8]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ffab 	bl	80004d4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3301      	adds	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	dbf1      	blt.n	8000570 <_write+0x12>
  }
  return len;
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <_close>:

int _close(int file)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005be:	605a      	str	r2, [r3, #4]
  return 0;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_isatty>:

int _isatty(int file)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005d6:	2301      	movs	r3, #1
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <_sbrk+0x5c>)
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <_sbrk+0x60>)
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <_sbrk+0x64>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <_sbrk+0x68>)
 8000620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	429a      	cmp	r2, r3
 800062e:	d207      	bcs.n	8000640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000630:	f000 f846 	bl	80006c0 <__errno>
 8000634:	4603      	mov	r3, r0
 8000636:	220c      	movs	r2, #12
 8000638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800063e:	e009      	b.n	8000654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <_sbrk+0x64>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <_sbrk+0x64>)
 8000650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20020000 	.word	0x20020000
 8000660:	00000400 	.word	0x00000400
 8000664:	20000080 	.word	0x20000080
 8000668:	20000098 	.word	0x20000098

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069a:	f000 f817 	bl	80006cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fdcd 	bl	800023c <main>

080006a2 <LoopForever>:

LoopForever:
  b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006b0:	08001264 	.word	0x08001264
  ldr r2, =_sbss
 80006b4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006b8:	20000094 	.word	0x20000094

080006bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC_IRQHandler>
	...

080006c0 <__errno>:
 80006c0:	4b01      	ldr	r3, [pc, #4]	; (80006c8 <__errno+0x8>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000

080006cc <__libc_init_array>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	4d0d      	ldr	r5, [pc, #52]	; (8000704 <__libc_init_array+0x38>)
 80006d0:	4c0d      	ldr	r4, [pc, #52]	; (8000708 <__libc_init_array+0x3c>)
 80006d2:	1b64      	subs	r4, r4, r5
 80006d4:	10a4      	asrs	r4, r4, #2
 80006d6:	2600      	movs	r6, #0
 80006d8:	42a6      	cmp	r6, r4
 80006da:	d109      	bne.n	80006f0 <__libc_init_array+0x24>
 80006dc:	4d0b      	ldr	r5, [pc, #44]	; (800070c <__libc_init_array+0x40>)
 80006de:	4c0c      	ldr	r4, [pc, #48]	; (8000710 <__libc_init_array+0x44>)
 80006e0:	f000 fd1e 	bl	8001120 <_init>
 80006e4:	1b64      	subs	r4, r4, r5
 80006e6:	10a4      	asrs	r4, r4, #2
 80006e8:	2600      	movs	r6, #0
 80006ea:	42a6      	cmp	r6, r4
 80006ec:	d105      	bne.n	80006fa <__libc_init_array+0x2e>
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f4:	4798      	blx	r3
 80006f6:	3601      	adds	r6, #1
 80006f8:	e7ee      	b.n	80006d8 <__libc_init_array+0xc>
 80006fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80006fe:	4798      	blx	r3
 8000700:	3601      	adds	r6, #1
 8000702:	e7f2      	b.n	80006ea <__libc_init_array+0x1e>
 8000704:	0800125c 	.word	0x0800125c
 8000708:	0800125c 	.word	0x0800125c
 800070c:	0800125c 	.word	0x0800125c
 8000710:	08001260 	.word	0x08001260

08000714 <memset>:
 8000714:	4402      	add	r2, r0
 8000716:	4603      	mov	r3, r0
 8000718:	4293      	cmp	r3, r2
 800071a:	d100      	bne.n	800071e <memset+0xa>
 800071c:	4770      	bx	lr
 800071e:	f803 1b01 	strb.w	r1, [r3], #1
 8000722:	e7f9      	b.n	8000718 <memset+0x4>

08000724 <_puts_r>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	460e      	mov	r6, r1
 8000728:	4605      	mov	r5, r0
 800072a:	b118      	cbz	r0, 8000734 <_puts_r+0x10>
 800072c:	6983      	ldr	r3, [r0, #24]
 800072e:	b90b      	cbnz	r3, 8000734 <_puts_r+0x10>
 8000730:	f000 fa48 	bl	8000bc4 <__sinit>
 8000734:	69ab      	ldr	r3, [r5, #24]
 8000736:	68ac      	ldr	r4, [r5, #8]
 8000738:	b913      	cbnz	r3, 8000740 <_puts_r+0x1c>
 800073a:	4628      	mov	r0, r5
 800073c:	f000 fa42 	bl	8000bc4 <__sinit>
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <_puts_r+0xd0>)
 8000742:	429c      	cmp	r4, r3
 8000744:	d120      	bne.n	8000788 <_puts_r+0x64>
 8000746:	686c      	ldr	r4, [r5, #4]
 8000748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800074a:	07db      	lsls	r3, r3, #31
 800074c:	d405      	bmi.n	800075a <_puts_r+0x36>
 800074e:	89a3      	ldrh	r3, [r4, #12]
 8000750:	0598      	lsls	r0, r3, #22
 8000752:	d402      	bmi.n	800075a <_puts_r+0x36>
 8000754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000756:	f000 fad3 	bl	8000d00 <__retarget_lock_acquire_recursive>
 800075a:	89a3      	ldrh	r3, [r4, #12]
 800075c:	0719      	lsls	r1, r3, #28
 800075e:	d51d      	bpl.n	800079c <_puts_r+0x78>
 8000760:	6923      	ldr	r3, [r4, #16]
 8000762:	b1db      	cbz	r3, 800079c <_puts_r+0x78>
 8000764:	3e01      	subs	r6, #1
 8000766:	68a3      	ldr	r3, [r4, #8]
 8000768:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800076c:	3b01      	subs	r3, #1
 800076e:	60a3      	str	r3, [r4, #8]
 8000770:	bb39      	cbnz	r1, 80007c2 <_puts_r+0x9e>
 8000772:	2b00      	cmp	r3, #0
 8000774:	da38      	bge.n	80007e8 <_puts_r+0xc4>
 8000776:	4622      	mov	r2, r4
 8000778:	210a      	movs	r1, #10
 800077a:	4628      	mov	r0, r5
 800077c:	f000 f848 	bl	8000810 <__swbuf_r>
 8000780:	3001      	adds	r0, #1
 8000782:	d011      	beq.n	80007a8 <_puts_r+0x84>
 8000784:	250a      	movs	r5, #10
 8000786:	e011      	b.n	80007ac <_puts_r+0x88>
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <_puts_r+0xd4>)
 800078a:	429c      	cmp	r4, r3
 800078c:	d101      	bne.n	8000792 <_puts_r+0x6e>
 800078e:	68ac      	ldr	r4, [r5, #8]
 8000790:	e7da      	b.n	8000748 <_puts_r+0x24>
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <_puts_r+0xd8>)
 8000794:	429c      	cmp	r4, r3
 8000796:	bf08      	it	eq
 8000798:	68ec      	ldreq	r4, [r5, #12]
 800079a:	e7d5      	b.n	8000748 <_puts_r+0x24>
 800079c:	4621      	mov	r1, r4
 800079e:	4628      	mov	r0, r5
 80007a0:	f000 f888 	bl	80008b4 <__swsetup_r>
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d0dd      	beq.n	8000764 <_puts_r+0x40>
 80007a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80007ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ae:	07da      	lsls	r2, r3, #31
 80007b0:	d405      	bmi.n	80007be <_puts_r+0x9a>
 80007b2:	89a3      	ldrh	r3, [r4, #12]
 80007b4:	059b      	lsls	r3, r3, #22
 80007b6:	d402      	bmi.n	80007be <_puts_r+0x9a>
 80007b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007ba:	f000 faa2 	bl	8000d02 <__retarget_lock_release_recursive>
 80007be:	4628      	mov	r0, r5
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da04      	bge.n	80007d0 <_puts_r+0xac>
 80007c6:	69a2      	ldr	r2, [r4, #24]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dc06      	bgt.n	80007da <_puts_r+0xb6>
 80007cc:	290a      	cmp	r1, #10
 80007ce:	d004      	beq.n	80007da <_puts_r+0xb6>
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	6022      	str	r2, [r4, #0]
 80007d6:	7019      	strb	r1, [r3, #0]
 80007d8:	e7c5      	b.n	8000766 <_puts_r+0x42>
 80007da:	4622      	mov	r2, r4
 80007dc:	4628      	mov	r0, r5
 80007de:	f000 f817 	bl	8000810 <__swbuf_r>
 80007e2:	3001      	adds	r0, #1
 80007e4:	d1bf      	bne.n	8000766 <_puts_r+0x42>
 80007e6:	e7df      	b.n	80007a8 <_puts_r+0x84>
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	250a      	movs	r5, #10
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	6022      	str	r2, [r4, #0]
 80007f0:	701d      	strb	r5, [r3, #0]
 80007f2:	e7db      	b.n	80007ac <_puts_r+0x88>
 80007f4:	0800121c 	.word	0x0800121c
 80007f8:	0800123c 	.word	0x0800123c
 80007fc:	080011fc 	.word	0x080011fc

08000800 <puts>:
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <puts+0xc>)
 8000802:	4601      	mov	r1, r0
 8000804:	6818      	ldr	r0, [r3, #0]
 8000806:	f7ff bf8d 	b.w	8000724 <_puts_r>
 800080a:	bf00      	nop
 800080c:	20000000 	.word	0x20000000

08000810 <__swbuf_r>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	460e      	mov	r6, r1
 8000814:	4614      	mov	r4, r2
 8000816:	4605      	mov	r5, r0
 8000818:	b118      	cbz	r0, 8000822 <__swbuf_r+0x12>
 800081a:	6983      	ldr	r3, [r0, #24]
 800081c:	b90b      	cbnz	r3, 8000822 <__swbuf_r+0x12>
 800081e:	f000 f9d1 	bl	8000bc4 <__sinit>
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <__swbuf_r+0x98>)
 8000824:	429c      	cmp	r4, r3
 8000826:	d12b      	bne.n	8000880 <__swbuf_r+0x70>
 8000828:	686c      	ldr	r4, [r5, #4]
 800082a:	69a3      	ldr	r3, [r4, #24]
 800082c:	60a3      	str	r3, [r4, #8]
 800082e:	89a3      	ldrh	r3, [r4, #12]
 8000830:	071a      	lsls	r2, r3, #28
 8000832:	d52f      	bpl.n	8000894 <__swbuf_r+0x84>
 8000834:	6923      	ldr	r3, [r4, #16]
 8000836:	b36b      	cbz	r3, 8000894 <__swbuf_r+0x84>
 8000838:	6923      	ldr	r3, [r4, #16]
 800083a:	6820      	ldr	r0, [r4, #0]
 800083c:	1ac0      	subs	r0, r0, r3
 800083e:	6963      	ldr	r3, [r4, #20]
 8000840:	b2f6      	uxtb	r6, r6
 8000842:	4283      	cmp	r3, r0
 8000844:	4637      	mov	r7, r6
 8000846:	dc04      	bgt.n	8000852 <__swbuf_r+0x42>
 8000848:	4621      	mov	r1, r4
 800084a:	4628      	mov	r0, r5
 800084c:	f000 f926 	bl	8000a9c <_fflush_r>
 8000850:	bb30      	cbnz	r0, 80008a0 <__swbuf_r+0x90>
 8000852:	68a3      	ldr	r3, [r4, #8]
 8000854:	3b01      	subs	r3, #1
 8000856:	60a3      	str	r3, [r4, #8]
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	6022      	str	r2, [r4, #0]
 800085e:	701e      	strb	r6, [r3, #0]
 8000860:	6963      	ldr	r3, [r4, #20]
 8000862:	3001      	adds	r0, #1
 8000864:	4283      	cmp	r3, r0
 8000866:	d004      	beq.n	8000872 <__swbuf_r+0x62>
 8000868:	89a3      	ldrh	r3, [r4, #12]
 800086a:	07db      	lsls	r3, r3, #31
 800086c:	d506      	bpl.n	800087c <__swbuf_r+0x6c>
 800086e:	2e0a      	cmp	r6, #10
 8000870:	d104      	bne.n	800087c <__swbuf_r+0x6c>
 8000872:	4621      	mov	r1, r4
 8000874:	4628      	mov	r0, r5
 8000876:	f000 f911 	bl	8000a9c <_fflush_r>
 800087a:	b988      	cbnz	r0, 80008a0 <__swbuf_r+0x90>
 800087c:	4638      	mov	r0, r7
 800087e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <__swbuf_r+0x9c>)
 8000882:	429c      	cmp	r4, r3
 8000884:	d101      	bne.n	800088a <__swbuf_r+0x7a>
 8000886:	68ac      	ldr	r4, [r5, #8]
 8000888:	e7cf      	b.n	800082a <__swbuf_r+0x1a>
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <__swbuf_r+0xa0>)
 800088c:	429c      	cmp	r4, r3
 800088e:	bf08      	it	eq
 8000890:	68ec      	ldreq	r4, [r5, #12]
 8000892:	e7ca      	b.n	800082a <__swbuf_r+0x1a>
 8000894:	4621      	mov	r1, r4
 8000896:	4628      	mov	r0, r5
 8000898:	f000 f80c 	bl	80008b4 <__swsetup_r>
 800089c:	2800      	cmp	r0, #0
 800089e:	d0cb      	beq.n	8000838 <__swbuf_r+0x28>
 80008a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80008a4:	e7ea      	b.n	800087c <__swbuf_r+0x6c>
 80008a6:	bf00      	nop
 80008a8:	0800121c 	.word	0x0800121c
 80008ac:	0800123c 	.word	0x0800123c
 80008b0:	080011fc 	.word	0x080011fc

080008b4 <__swsetup_r>:
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <__swsetup_r+0xcc>)
 80008b6:	b570      	push	{r4, r5, r6, lr}
 80008b8:	681d      	ldr	r5, [r3, #0]
 80008ba:	4606      	mov	r6, r0
 80008bc:	460c      	mov	r4, r1
 80008be:	b125      	cbz	r5, 80008ca <__swsetup_r+0x16>
 80008c0:	69ab      	ldr	r3, [r5, #24]
 80008c2:	b913      	cbnz	r3, 80008ca <__swsetup_r+0x16>
 80008c4:	4628      	mov	r0, r5
 80008c6:	f000 f97d 	bl	8000bc4 <__sinit>
 80008ca:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <__swsetup_r+0xd0>)
 80008cc:	429c      	cmp	r4, r3
 80008ce:	d10f      	bne.n	80008f0 <__swsetup_r+0x3c>
 80008d0:	686c      	ldr	r4, [r5, #4]
 80008d2:	89a3      	ldrh	r3, [r4, #12]
 80008d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008d8:	0719      	lsls	r1, r3, #28
 80008da:	d42c      	bmi.n	8000936 <__swsetup_r+0x82>
 80008dc:	06dd      	lsls	r5, r3, #27
 80008de:	d411      	bmi.n	8000904 <__swsetup_r+0x50>
 80008e0:	2309      	movs	r3, #9
 80008e2:	6033      	str	r3, [r6, #0]
 80008e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008e8:	81a3      	strh	r3, [r4, #12]
 80008ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ee:	e03e      	b.n	800096e <__swsetup_r+0xba>
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <__swsetup_r+0xd4>)
 80008f2:	429c      	cmp	r4, r3
 80008f4:	d101      	bne.n	80008fa <__swsetup_r+0x46>
 80008f6:	68ac      	ldr	r4, [r5, #8]
 80008f8:	e7eb      	b.n	80008d2 <__swsetup_r+0x1e>
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <__swsetup_r+0xd8>)
 80008fc:	429c      	cmp	r4, r3
 80008fe:	bf08      	it	eq
 8000900:	68ec      	ldreq	r4, [r5, #12]
 8000902:	e7e6      	b.n	80008d2 <__swsetup_r+0x1e>
 8000904:	0758      	lsls	r0, r3, #29
 8000906:	d512      	bpl.n	800092e <__swsetup_r+0x7a>
 8000908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800090a:	b141      	cbz	r1, 800091e <__swsetup_r+0x6a>
 800090c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000910:	4299      	cmp	r1, r3
 8000912:	d002      	beq.n	800091a <__swsetup_r+0x66>
 8000914:	4630      	mov	r0, r6
 8000916:	f000 fa5b 	bl	8000dd0 <_free_r>
 800091a:	2300      	movs	r3, #0
 800091c:	6363      	str	r3, [r4, #52]	; 0x34
 800091e:	89a3      	ldrh	r3, [r4, #12]
 8000920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000924:	81a3      	strh	r3, [r4, #12]
 8000926:	2300      	movs	r3, #0
 8000928:	6063      	str	r3, [r4, #4]
 800092a:	6923      	ldr	r3, [r4, #16]
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	89a3      	ldrh	r3, [r4, #12]
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	81a3      	strh	r3, [r4, #12]
 8000936:	6923      	ldr	r3, [r4, #16]
 8000938:	b94b      	cbnz	r3, 800094e <__swsetup_r+0x9a>
 800093a:	89a3      	ldrh	r3, [r4, #12]
 800093c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000944:	d003      	beq.n	800094e <__swsetup_r+0x9a>
 8000946:	4621      	mov	r1, r4
 8000948:	4630      	mov	r0, r6
 800094a:	f000 fa01 	bl	8000d50 <__smakebuf_r>
 800094e:	89a0      	ldrh	r0, [r4, #12]
 8000950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000954:	f010 0301 	ands.w	r3, r0, #1
 8000958:	d00a      	beq.n	8000970 <__swsetup_r+0xbc>
 800095a:	2300      	movs	r3, #0
 800095c:	60a3      	str	r3, [r4, #8]
 800095e:	6963      	ldr	r3, [r4, #20]
 8000960:	425b      	negs	r3, r3
 8000962:	61a3      	str	r3, [r4, #24]
 8000964:	6923      	ldr	r3, [r4, #16]
 8000966:	b943      	cbnz	r3, 800097a <__swsetup_r+0xc6>
 8000968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800096c:	d1ba      	bne.n	80008e4 <__swsetup_r+0x30>
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	0781      	lsls	r1, r0, #30
 8000972:	bf58      	it	pl
 8000974:	6963      	ldrpl	r3, [r4, #20]
 8000976:	60a3      	str	r3, [r4, #8]
 8000978:	e7f4      	b.n	8000964 <__swsetup_r+0xb0>
 800097a:	2000      	movs	r0, #0
 800097c:	e7f7      	b.n	800096e <__swsetup_r+0xba>
 800097e:	bf00      	nop
 8000980:	20000000 	.word	0x20000000
 8000984:	0800121c 	.word	0x0800121c
 8000988:	0800123c 	.word	0x0800123c
 800098c:	080011fc 	.word	0x080011fc

08000990 <__sflush_r>:
 8000990:	898a      	ldrh	r2, [r1, #12]
 8000992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000996:	4605      	mov	r5, r0
 8000998:	0710      	lsls	r0, r2, #28
 800099a:	460c      	mov	r4, r1
 800099c:	d458      	bmi.n	8000a50 <__sflush_r+0xc0>
 800099e:	684b      	ldr	r3, [r1, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dc05      	bgt.n	80009b0 <__sflush_r+0x20>
 80009a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	dc02      	bgt.n	80009b0 <__sflush_r+0x20>
 80009aa:	2000      	movs	r0, #0
 80009ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d0f9      	beq.n	80009aa <__sflush_r+0x1a>
 80009b6:	2300      	movs	r3, #0
 80009b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009bc:	682f      	ldr	r7, [r5, #0]
 80009be:	602b      	str	r3, [r5, #0]
 80009c0:	d032      	beq.n	8000a28 <__sflush_r+0x98>
 80009c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009c4:	89a3      	ldrh	r3, [r4, #12]
 80009c6:	075a      	lsls	r2, r3, #29
 80009c8:	d505      	bpl.n	80009d6 <__sflush_r+0x46>
 80009ca:	6863      	ldr	r3, [r4, #4]
 80009cc:	1ac0      	subs	r0, r0, r3
 80009ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009d0:	b10b      	cbz	r3, 80009d6 <__sflush_r+0x46>
 80009d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009d4:	1ac0      	subs	r0, r0, r3
 80009d6:	2300      	movs	r3, #0
 80009d8:	4602      	mov	r2, r0
 80009da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009dc:	6a21      	ldr	r1, [r4, #32]
 80009de:	4628      	mov	r0, r5
 80009e0:	47b0      	blx	r6
 80009e2:	1c43      	adds	r3, r0, #1
 80009e4:	89a3      	ldrh	r3, [r4, #12]
 80009e6:	d106      	bne.n	80009f6 <__sflush_r+0x66>
 80009e8:	6829      	ldr	r1, [r5, #0]
 80009ea:	291d      	cmp	r1, #29
 80009ec:	d82c      	bhi.n	8000a48 <__sflush_r+0xb8>
 80009ee:	4a2a      	ldr	r2, [pc, #168]	; (8000a98 <__sflush_r+0x108>)
 80009f0:	40ca      	lsrs	r2, r1
 80009f2:	07d6      	lsls	r6, r2, #31
 80009f4:	d528      	bpl.n	8000a48 <__sflush_r+0xb8>
 80009f6:	2200      	movs	r2, #0
 80009f8:	6062      	str	r2, [r4, #4]
 80009fa:	04d9      	lsls	r1, r3, #19
 80009fc:	6922      	ldr	r2, [r4, #16]
 80009fe:	6022      	str	r2, [r4, #0]
 8000a00:	d504      	bpl.n	8000a0c <__sflush_r+0x7c>
 8000a02:	1c42      	adds	r2, r0, #1
 8000a04:	d101      	bne.n	8000a0a <__sflush_r+0x7a>
 8000a06:	682b      	ldr	r3, [r5, #0]
 8000a08:	b903      	cbnz	r3, 8000a0c <__sflush_r+0x7c>
 8000a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8000a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a0e:	602f      	str	r7, [r5, #0]
 8000a10:	2900      	cmp	r1, #0
 8000a12:	d0ca      	beq.n	80009aa <__sflush_r+0x1a>
 8000a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a18:	4299      	cmp	r1, r3
 8000a1a:	d002      	beq.n	8000a22 <__sflush_r+0x92>
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	f000 f9d7 	bl	8000dd0 <_free_r>
 8000a22:	2000      	movs	r0, #0
 8000a24:	6360      	str	r0, [r4, #52]	; 0x34
 8000a26:	e7c1      	b.n	80009ac <__sflush_r+0x1c>
 8000a28:	6a21      	ldr	r1, [r4, #32]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	47b0      	blx	r6
 8000a30:	1c41      	adds	r1, r0, #1
 8000a32:	d1c7      	bne.n	80009c4 <__sflush_r+0x34>
 8000a34:	682b      	ldr	r3, [r5, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0c4      	beq.n	80009c4 <__sflush_r+0x34>
 8000a3a:	2b1d      	cmp	r3, #29
 8000a3c:	d001      	beq.n	8000a42 <__sflush_r+0xb2>
 8000a3e:	2b16      	cmp	r3, #22
 8000a40:	d101      	bne.n	8000a46 <__sflush_r+0xb6>
 8000a42:	602f      	str	r7, [r5, #0]
 8000a44:	e7b1      	b.n	80009aa <__sflush_r+0x1a>
 8000a46:	89a3      	ldrh	r3, [r4, #12]
 8000a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4c:	81a3      	strh	r3, [r4, #12]
 8000a4e:	e7ad      	b.n	80009ac <__sflush_r+0x1c>
 8000a50:	690f      	ldr	r7, [r1, #16]
 8000a52:	2f00      	cmp	r7, #0
 8000a54:	d0a9      	beq.n	80009aa <__sflush_r+0x1a>
 8000a56:	0793      	lsls	r3, r2, #30
 8000a58:	680e      	ldr	r6, [r1, #0]
 8000a5a:	bf08      	it	eq
 8000a5c:	694b      	ldreq	r3, [r1, #20]
 8000a5e:	600f      	str	r7, [r1, #0]
 8000a60:	bf18      	it	ne
 8000a62:	2300      	movne	r3, #0
 8000a64:	eba6 0807 	sub.w	r8, r6, r7
 8000a68:	608b      	str	r3, [r1, #8]
 8000a6a:	f1b8 0f00 	cmp.w	r8, #0
 8000a6e:	dd9c      	ble.n	80009aa <__sflush_r+0x1a>
 8000a70:	6a21      	ldr	r1, [r4, #32]
 8000a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a74:	4643      	mov	r3, r8
 8000a76:	463a      	mov	r2, r7
 8000a78:	4628      	mov	r0, r5
 8000a7a:	47b0      	blx	r6
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	dc06      	bgt.n	8000a8e <__sflush_r+0xfe>
 8000a80:	89a3      	ldrh	r3, [r4, #12]
 8000a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a86:	81a3      	strh	r3, [r4, #12]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a8c:	e78e      	b.n	80009ac <__sflush_r+0x1c>
 8000a8e:	4407      	add	r7, r0
 8000a90:	eba8 0800 	sub.w	r8, r8, r0
 8000a94:	e7e9      	b.n	8000a6a <__sflush_r+0xda>
 8000a96:	bf00      	nop
 8000a98:	20400001 	.word	0x20400001

08000a9c <_fflush_r>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	690b      	ldr	r3, [r1, #16]
 8000aa0:	4605      	mov	r5, r0
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	b913      	cbnz	r3, 8000aac <_fflush_r+0x10>
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
 8000aac:	b118      	cbz	r0, 8000ab6 <_fflush_r+0x1a>
 8000aae:	6983      	ldr	r3, [r0, #24]
 8000ab0:	b90b      	cbnz	r3, 8000ab6 <_fflush_r+0x1a>
 8000ab2:	f000 f887 	bl	8000bc4 <__sinit>
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <_fflush_r+0x6c>)
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	d11b      	bne.n	8000af4 <_fflush_r+0x58>
 8000abc:	686c      	ldr	r4, [r5, #4]
 8000abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0ef      	beq.n	8000aa6 <_fflush_r+0xa>
 8000ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ac8:	07d0      	lsls	r0, r2, #31
 8000aca:	d404      	bmi.n	8000ad6 <_fflush_r+0x3a>
 8000acc:	0599      	lsls	r1, r3, #22
 8000ace:	d402      	bmi.n	8000ad6 <_fflush_r+0x3a>
 8000ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ad2:	f000 f915 	bl	8000d00 <__retarget_lock_acquire_recursive>
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	4621      	mov	r1, r4
 8000ada:	f7ff ff59 	bl	8000990 <__sflush_r>
 8000ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ae0:	07da      	lsls	r2, r3, #31
 8000ae2:	4605      	mov	r5, r0
 8000ae4:	d4e0      	bmi.n	8000aa8 <_fflush_r+0xc>
 8000ae6:	89a3      	ldrh	r3, [r4, #12]
 8000ae8:	059b      	lsls	r3, r3, #22
 8000aea:	d4dd      	bmi.n	8000aa8 <_fflush_r+0xc>
 8000aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aee:	f000 f908 	bl	8000d02 <__retarget_lock_release_recursive>
 8000af2:	e7d9      	b.n	8000aa8 <_fflush_r+0xc>
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <_fflush_r+0x70>)
 8000af6:	429c      	cmp	r4, r3
 8000af8:	d101      	bne.n	8000afe <_fflush_r+0x62>
 8000afa:	68ac      	ldr	r4, [r5, #8]
 8000afc:	e7df      	b.n	8000abe <_fflush_r+0x22>
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <_fflush_r+0x74>)
 8000b00:	429c      	cmp	r4, r3
 8000b02:	bf08      	it	eq
 8000b04:	68ec      	ldreq	r4, [r5, #12]
 8000b06:	e7da      	b.n	8000abe <_fflush_r+0x22>
 8000b08:	0800121c 	.word	0x0800121c
 8000b0c:	0800123c 	.word	0x0800123c
 8000b10:	080011fc 	.word	0x080011fc

08000b14 <std>:
 8000b14:	2300      	movs	r3, #0
 8000b16:	b510      	push	{r4, lr}
 8000b18:	4604      	mov	r4, r0
 8000b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8000b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b22:	6083      	str	r3, [r0, #8]
 8000b24:	8181      	strh	r1, [r0, #12]
 8000b26:	6643      	str	r3, [r0, #100]	; 0x64
 8000b28:	81c2      	strh	r2, [r0, #14]
 8000b2a:	6183      	str	r3, [r0, #24]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2208      	movs	r2, #8
 8000b30:	305c      	adds	r0, #92	; 0x5c
 8000b32:	f7ff fdef 	bl	8000714 <memset>
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <std+0x38>)
 8000b38:	6263      	str	r3, [r4, #36]	; 0x24
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <std+0x3c>)
 8000b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <std+0x40>)
 8000b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <std+0x44>)
 8000b44:	6224      	str	r4, [r4, #32]
 8000b46:	6323      	str	r3, [r4, #48]	; 0x30
 8000b48:	bd10      	pop	{r4, pc}
 8000b4a:	bf00      	nop
 8000b4c:	08000fb1 	.word	0x08000fb1
 8000b50:	08000fd3 	.word	0x08000fd3
 8000b54:	0800100b 	.word	0x0800100b
 8000b58:	0800102f 	.word	0x0800102f

08000b5c <_cleanup_r>:
 8000b5c:	4901      	ldr	r1, [pc, #4]	; (8000b64 <_cleanup_r+0x8>)
 8000b5e:	f000 b8af 	b.w	8000cc0 <_fwalk_reent>
 8000b62:	bf00      	nop
 8000b64:	08000a9d 	.word	0x08000a9d

08000b68 <__sfmoreglue>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	2268      	movs	r2, #104	; 0x68
 8000b6c:	1e4d      	subs	r5, r1, #1
 8000b6e:	4355      	muls	r5, r2
 8000b70:	460e      	mov	r6, r1
 8000b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b76:	f000 f997 	bl	8000ea8 <_malloc_r>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	b140      	cbz	r0, 8000b90 <__sfmoreglue+0x28>
 8000b7e:	2100      	movs	r1, #0
 8000b80:	e9c0 1600 	strd	r1, r6, [r0]
 8000b84:	300c      	adds	r0, #12
 8000b86:	60a0      	str	r0, [r4, #8]
 8000b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b8c:	f7ff fdc2 	bl	8000714 <memset>
 8000b90:	4620      	mov	r0, r4
 8000b92:	bd70      	pop	{r4, r5, r6, pc}

08000b94 <__sfp_lock_acquire>:
 8000b94:	4801      	ldr	r0, [pc, #4]	; (8000b9c <__sfp_lock_acquire+0x8>)
 8000b96:	f000 b8b3 	b.w	8000d00 <__retarget_lock_acquire_recursive>
 8000b9a:	bf00      	nop
 8000b9c:	20000085 	.word	0x20000085

08000ba0 <__sfp_lock_release>:
 8000ba0:	4801      	ldr	r0, [pc, #4]	; (8000ba8 <__sfp_lock_release+0x8>)
 8000ba2:	f000 b8ae 	b.w	8000d02 <__retarget_lock_release_recursive>
 8000ba6:	bf00      	nop
 8000ba8:	20000085 	.word	0x20000085

08000bac <__sinit_lock_acquire>:
 8000bac:	4801      	ldr	r0, [pc, #4]	; (8000bb4 <__sinit_lock_acquire+0x8>)
 8000bae:	f000 b8a7 	b.w	8000d00 <__retarget_lock_acquire_recursive>
 8000bb2:	bf00      	nop
 8000bb4:	20000086 	.word	0x20000086

08000bb8 <__sinit_lock_release>:
 8000bb8:	4801      	ldr	r0, [pc, #4]	; (8000bc0 <__sinit_lock_release+0x8>)
 8000bba:	f000 b8a2 	b.w	8000d02 <__retarget_lock_release_recursive>
 8000bbe:	bf00      	nop
 8000bc0:	20000086 	.word	0x20000086

08000bc4 <__sinit>:
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	f7ff fff0 	bl	8000bac <__sinit_lock_acquire>
 8000bcc:	69a3      	ldr	r3, [r4, #24]
 8000bce:	b11b      	cbz	r3, 8000bd8 <__sinit+0x14>
 8000bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bd4:	f7ff bff0 	b.w	8000bb8 <__sinit_lock_release>
 8000bd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <__sinit+0x68>)
 8000be0:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <__sinit+0x6c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000be6:	42a3      	cmp	r3, r4
 8000be8:	bf04      	itt	eq
 8000bea:	2301      	moveq	r3, #1
 8000bec:	61a3      	streq	r3, [r4, #24]
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f000 f820 	bl	8000c34 <__sfp>
 8000bf4:	6060      	str	r0, [r4, #4]
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f000 f81c 	bl	8000c34 <__sfp>
 8000bfc:	60a0      	str	r0, [r4, #8]
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f000 f818 	bl	8000c34 <__sfp>
 8000c04:	2200      	movs	r2, #0
 8000c06:	60e0      	str	r0, [r4, #12]
 8000c08:	2104      	movs	r1, #4
 8000c0a:	6860      	ldr	r0, [r4, #4]
 8000c0c:	f7ff ff82 	bl	8000b14 <std>
 8000c10:	68a0      	ldr	r0, [r4, #8]
 8000c12:	2201      	movs	r2, #1
 8000c14:	2109      	movs	r1, #9
 8000c16:	f7ff ff7d 	bl	8000b14 <std>
 8000c1a:	68e0      	ldr	r0, [r4, #12]
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	2112      	movs	r1, #18
 8000c20:	f7ff ff78 	bl	8000b14 <std>
 8000c24:	2301      	movs	r3, #1
 8000c26:	61a3      	str	r3, [r4, #24]
 8000c28:	e7d2      	b.n	8000bd0 <__sinit+0xc>
 8000c2a:	bf00      	nop
 8000c2c:	080011f8 	.word	0x080011f8
 8000c30:	08000b5d 	.word	0x08000b5d

08000c34 <__sfp>:
 8000c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c36:	4607      	mov	r7, r0
 8000c38:	f7ff ffac 	bl	8000b94 <__sfp_lock_acquire>
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <__sfp+0x84>)
 8000c3e:	681e      	ldr	r6, [r3, #0]
 8000c40:	69b3      	ldr	r3, [r6, #24]
 8000c42:	b913      	cbnz	r3, 8000c4a <__sfp+0x16>
 8000c44:	4630      	mov	r0, r6
 8000c46:	f7ff ffbd 	bl	8000bc4 <__sinit>
 8000c4a:	3648      	adds	r6, #72	; 0x48
 8000c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	d503      	bpl.n	8000c5c <__sfp+0x28>
 8000c54:	6833      	ldr	r3, [r6, #0]
 8000c56:	b30b      	cbz	r3, 8000c9c <__sfp+0x68>
 8000c58:	6836      	ldr	r6, [r6, #0]
 8000c5a:	e7f7      	b.n	8000c4c <__sfp+0x18>
 8000c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c60:	b9d5      	cbnz	r5, 8000c98 <__sfp+0x64>
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <__sfp+0x88>)
 8000c64:	60e3      	str	r3, [r4, #12]
 8000c66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c6a:	6665      	str	r5, [r4, #100]	; 0x64
 8000c6c:	f000 f847 	bl	8000cfe <__retarget_lock_init_recursive>
 8000c70:	f7ff ff96 	bl	8000ba0 <__sfp_lock_release>
 8000c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c7c:	6025      	str	r5, [r4, #0]
 8000c7e:	61a5      	str	r5, [r4, #24]
 8000c80:	2208      	movs	r2, #8
 8000c82:	4629      	mov	r1, r5
 8000c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c88:	f7ff fd44 	bl	8000714 <memset>
 8000c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c94:	4620      	mov	r0, r4
 8000c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c98:	3468      	adds	r4, #104	; 0x68
 8000c9a:	e7d9      	b.n	8000c50 <__sfp+0x1c>
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	f7ff ff62 	bl	8000b68 <__sfmoreglue>
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	6030      	str	r0, [r6, #0]
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d1d5      	bne.n	8000c58 <__sfp+0x24>
 8000cac:	f7ff ff78 	bl	8000ba0 <__sfp_lock_release>
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	e7ee      	b.n	8000c94 <__sfp+0x60>
 8000cb6:	bf00      	nop
 8000cb8:	080011f8 	.word	0x080011f8
 8000cbc:	ffff0001 	.word	0xffff0001

08000cc0 <_fwalk_reent>:
 8000cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ccc:	2700      	movs	r7, #0
 8000cce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cd2:	f1b9 0901 	subs.w	r9, r9, #1
 8000cd6:	d505      	bpl.n	8000ce4 <_fwalk_reent+0x24>
 8000cd8:	6824      	ldr	r4, [r4, #0]
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d1f7      	bne.n	8000cce <_fwalk_reent+0xe>
 8000cde:	4638      	mov	r0, r7
 8000ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ce4:	89ab      	ldrh	r3, [r5, #12]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d907      	bls.n	8000cfa <_fwalk_reent+0x3a>
 8000cea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	d003      	beq.n	8000cfa <_fwalk_reent+0x3a>
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	47c0      	blx	r8
 8000cf8:	4307      	orrs	r7, r0
 8000cfa:	3568      	adds	r5, #104	; 0x68
 8000cfc:	e7e9      	b.n	8000cd2 <_fwalk_reent+0x12>

08000cfe <__retarget_lock_init_recursive>:
 8000cfe:	4770      	bx	lr

08000d00 <__retarget_lock_acquire_recursive>:
 8000d00:	4770      	bx	lr

08000d02 <__retarget_lock_release_recursive>:
 8000d02:	4770      	bx	lr

08000d04 <__swhatbuf_r>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	460e      	mov	r6, r1
 8000d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	b096      	sub	sp, #88	; 0x58
 8000d10:	4614      	mov	r4, r2
 8000d12:	461d      	mov	r5, r3
 8000d14:	da08      	bge.n	8000d28 <__swhatbuf_r+0x24>
 8000d16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	602a      	str	r2, [r5, #0]
 8000d1e:	061a      	lsls	r2, r3, #24
 8000d20:	d410      	bmi.n	8000d44 <__swhatbuf_r+0x40>
 8000d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d26:	e00e      	b.n	8000d46 <__swhatbuf_r+0x42>
 8000d28:	466a      	mov	r2, sp
 8000d2a:	f000 f9a7 	bl	800107c <_fstat_r>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	dbf1      	blt.n	8000d16 <__swhatbuf_r+0x12>
 8000d32:	9a01      	ldr	r2, [sp, #4]
 8000d34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d3c:	425a      	negs	r2, r3
 8000d3e:	415a      	adcs	r2, r3
 8000d40:	602a      	str	r2, [r5, #0]
 8000d42:	e7ee      	b.n	8000d22 <__swhatbuf_r+0x1e>
 8000d44:	2340      	movs	r3, #64	; 0x40
 8000d46:	2000      	movs	r0, #0
 8000d48:	6023      	str	r3, [r4, #0]
 8000d4a:	b016      	add	sp, #88	; 0x58
 8000d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d50 <__smakebuf_r>:
 8000d50:	898b      	ldrh	r3, [r1, #12]
 8000d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d54:	079d      	lsls	r5, r3, #30
 8000d56:	4606      	mov	r6, r0
 8000d58:	460c      	mov	r4, r1
 8000d5a:	d507      	bpl.n	8000d6c <__smakebuf_r+0x1c>
 8000d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d60:	6023      	str	r3, [r4, #0]
 8000d62:	6123      	str	r3, [r4, #16]
 8000d64:	2301      	movs	r3, #1
 8000d66:	6163      	str	r3, [r4, #20]
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	ab01      	add	r3, sp, #4
 8000d6e:	466a      	mov	r2, sp
 8000d70:	f7ff ffc8 	bl	8000d04 <__swhatbuf_r>
 8000d74:	9900      	ldr	r1, [sp, #0]
 8000d76:	4605      	mov	r5, r0
 8000d78:	4630      	mov	r0, r6
 8000d7a:	f000 f895 	bl	8000ea8 <_malloc_r>
 8000d7e:	b948      	cbnz	r0, 8000d94 <__smakebuf_r+0x44>
 8000d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d84:	059a      	lsls	r2, r3, #22
 8000d86:	d4ef      	bmi.n	8000d68 <__smakebuf_r+0x18>
 8000d88:	f023 0303 	bic.w	r3, r3, #3
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	81a3      	strh	r3, [r4, #12]
 8000d92:	e7e3      	b.n	8000d5c <__smakebuf_r+0xc>
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <__smakebuf_r+0x7c>)
 8000d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d98:	89a3      	ldrh	r3, [r4, #12]
 8000d9a:	6020      	str	r0, [r4, #0]
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	81a3      	strh	r3, [r4, #12]
 8000da2:	9b00      	ldr	r3, [sp, #0]
 8000da4:	6163      	str	r3, [r4, #20]
 8000da6:	9b01      	ldr	r3, [sp, #4]
 8000da8:	6120      	str	r0, [r4, #16]
 8000daa:	b15b      	cbz	r3, 8000dc4 <__smakebuf_r+0x74>
 8000dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000db0:	4630      	mov	r0, r6
 8000db2:	f000 f975 	bl	80010a0 <_isatty_r>
 8000db6:	b128      	cbz	r0, 8000dc4 <__smakebuf_r+0x74>
 8000db8:	89a3      	ldrh	r3, [r4, #12]
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	81a3      	strh	r3, [r4, #12]
 8000dc4:	89a0      	ldrh	r0, [r4, #12]
 8000dc6:	4305      	orrs	r5, r0
 8000dc8:	81a5      	strh	r5, [r4, #12]
 8000dca:	e7cd      	b.n	8000d68 <__smakebuf_r+0x18>
 8000dcc:	08000b5d 	.word	0x08000b5d

08000dd0 <_free_r>:
 8000dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d044      	beq.n	8000e60 <_free_r+0x90>
 8000dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dda:	9001      	str	r0, [sp, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f1a1 0404 	sub.w	r4, r1, #4
 8000de2:	bfb8      	it	lt
 8000de4:	18e4      	addlt	r4, r4, r3
 8000de6:	f000 f97d 	bl	80010e4 <__malloc_lock>
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <_free_r+0x94>)
 8000dec:	9801      	ldr	r0, [sp, #4]
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	b933      	cbnz	r3, 8000e00 <_free_r+0x30>
 8000df2:	6063      	str	r3, [r4, #4]
 8000df4:	6014      	str	r4, [r2, #0]
 8000df6:	b003      	add	sp, #12
 8000df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000dfc:	f000 b978 	b.w	80010f0 <__malloc_unlock>
 8000e00:	42a3      	cmp	r3, r4
 8000e02:	d908      	bls.n	8000e16 <_free_r+0x46>
 8000e04:	6825      	ldr	r5, [r4, #0]
 8000e06:	1961      	adds	r1, r4, r5
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	bf01      	itttt	eq
 8000e0c:	6819      	ldreq	r1, [r3, #0]
 8000e0e:	685b      	ldreq	r3, [r3, #4]
 8000e10:	1949      	addeq	r1, r1, r5
 8000e12:	6021      	streq	r1, [r4, #0]
 8000e14:	e7ed      	b.n	8000df2 <_free_r+0x22>
 8000e16:	461a      	mov	r2, r3
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	b10b      	cbz	r3, 8000e20 <_free_r+0x50>
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	d9fa      	bls.n	8000e16 <_free_r+0x46>
 8000e20:	6811      	ldr	r1, [r2, #0]
 8000e22:	1855      	adds	r5, r2, r1
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	d10b      	bne.n	8000e40 <_free_r+0x70>
 8000e28:	6824      	ldr	r4, [r4, #0]
 8000e2a:	4421      	add	r1, r4
 8000e2c:	1854      	adds	r4, r2, r1
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	6011      	str	r1, [r2, #0]
 8000e32:	d1e0      	bne.n	8000df6 <_free_r+0x26>
 8000e34:	681c      	ldr	r4, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	6053      	str	r3, [r2, #4]
 8000e3a:	4421      	add	r1, r4
 8000e3c:	6011      	str	r1, [r2, #0]
 8000e3e:	e7da      	b.n	8000df6 <_free_r+0x26>
 8000e40:	d902      	bls.n	8000e48 <_free_r+0x78>
 8000e42:	230c      	movs	r3, #12
 8000e44:	6003      	str	r3, [r0, #0]
 8000e46:	e7d6      	b.n	8000df6 <_free_r+0x26>
 8000e48:	6825      	ldr	r5, [r4, #0]
 8000e4a:	1961      	adds	r1, r4, r5
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	bf04      	itt	eq
 8000e50:	6819      	ldreq	r1, [r3, #0]
 8000e52:	685b      	ldreq	r3, [r3, #4]
 8000e54:	6063      	str	r3, [r4, #4]
 8000e56:	bf04      	itt	eq
 8000e58:	1949      	addeq	r1, r1, r5
 8000e5a:	6021      	streq	r1, [r4, #0]
 8000e5c:	6054      	str	r4, [r2, #4]
 8000e5e:	e7ca      	b.n	8000df6 <_free_r+0x26>
 8000e60:	b003      	add	sp, #12
 8000e62:	bd30      	pop	{r4, r5, pc}
 8000e64:	20000088 	.word	0x20000088

08000e68 <sbrk_aligned>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	4e0e      	ldr	r6, [pc, #56]	; (8000ea4 <sbrk_aligned+0x3c>)
 8000e6c:	460c      	mov	r4, r1
 8000e6e:	6831      	ldr	r1, [r6, #0]
 8000e70:	4605      	mov	r5, r0
 8000e72:	b911      	cbnz	r1, 8000e7a <sbrk_aligned+0x12>
 8000e74:	f000 f88c 	bl	8000f90 <_sbrk_r>
 8000e78:	6030      	str	r0, [r6, #0]
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f000 f887 	bl	8000f90 <_sbrk_r>
 8000e82:	1c43      	adds	r3, r0, #1
 8000e84:	d00a      	beq.n	8000e9c <sbrk_aligned+0x34>
 8000e86:	1cc4      	adds	r4, r0, #3
 8000e88:	f024 0403 	bic.w	r4, r4, #3
 8000e8c:	42a0      	cmp	r0, r4
 8000e8e:	d007      	beq.n	8000ea0 <sbrk_aligned+0x38>
 8000e90:	1a21      	subs	r1, r4, r0
 8000e92:	4628      	mov	r0, r5
 8000e94:	f000 f87c 	bl	8000f90 <_sbrk_r>
 8000e98:	3001      	adds	r0, #1
 8000e9a:	d101      	bne.n	8000ea0 <sbrk_aligned+0x38>
 8000e9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
 8000ea4:	2000008c 	.word	0x2000008c

08000ea8 <_malloc_r>:
 8000ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eac:	1ccd      	adds	r5, r1, #3
 8000eae:	f025 0503 	bic.w	r5, r5, #3
 8000eb2:	3508      	adds	r5, #8
 8000eb4:	2d0c      	cmp	r5, #12
 8000eb6:	bf38      	it	cc
 8000eb8:	250c      	movcc	r5, #12
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	4607      	mov	r7, r0
 8000ebe:	db01      	blt.n	8000ec4 <_malloc_r+0x1c>
 8000ec0:	42a9      	cmp	r1, r5
 8000ec2:	d905      	bls.n	8000ed0 <_malloc_r+0x28>
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	2600      	movs	r6, #0
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ed0:	4e2e      	ldr	r6, [pc, #184]	; (8000f8c <_malloc_r+0xe4>)
 8000ed2:	f000 f907 	bl	80010e4 <__malloc_lock>
 8000ed6:	6833      	ldr	r3, [r6, #0]
 8000ed8:	461c      	mov	r4, r3
 8000eda:	bb34      	cbnz	r4, 8000f2a <_malloc_r+0x82>
 8000edc:	4629      	mov	r1, r5
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f7ff ffc2 	bl	8000e68 <sbrk_aligned>
 8000ee4:	1c43      	adds	r3, r0, #1
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	d14d      	bne.n	8000f86 <_malloc_r+0xde>
 8000eea:	6834      	ldr	r4, [r6, #0]
 8000eec:	4626      	mov	r6, r4
 8000eee:	2e00      	cmp	r6, #0
 8000ef0:	d140      	bne.n	8000f74 <_malloc_r+0xcc>
 8000ef2:	6823      	ldr	r3, [r4, #0]
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	4638      	mov	r0, r7
 8000ef8:	eb04 0803 	add.w	r8, r4, r3
 8000efc:	f000 f848 	bl	8000f90 <_sbrk_r>
 8000f00:	4580      	cmp	r8, r0
 8000f02:	d13a      	bne.n	8000f7a <_malloc_r+0xd2>
 8000f04:	6821      	ldr	r1, [r4, #0]
 8000f06:	3503      	adds	r5, #3
 8000f08:	1a6d      	subs	r5, r5, r1
 8000f0a:	f025 0503 	bic.w	r5, r5, #3
 8000f0e:	3508      	adds	r5, #8
 8000f10:	2d0c      	cmp	r5, #12
 8000f12:	bf38      	it	cc
 8000f14:	250c      	movcc	r5, #12
 8000f16:	4629      	mov	r1, r5
 8000f18:	4638      	mov	r0, r7
 8000f1a:	f7ff ffa5 	bl	8000e68 <sbrk_aligned>
 8000f1e:	3001      	adds	r0, #1
 8000f20:	d02b      	beq.n	8000f7a <_malloc_r+0xd2>
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	442b      	add	r3, r5
 8000f26:	6023      	str	r3, [r4, #0]
 8000f28:	e00e      	b.n	8000f48 <_malloc_r+0xa0>
 8000f2a:	6822      	ldr	r2, [r4, #0]
 8000f2c:	1b52      	subs	r2, r2, r5
 8000f2e:	d41e      	bmi.n	8000f6e <_malloc_r+0xc6>
 8000f30:	2a0b      	cmp	r2, #11
 8000f32:	d916      	bls.n	8000f62 <_malloc_r+0xba>
 8000f34:	1961      	adds	r1, r4, r5
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	6025      	str	r5, [r4, #0]
 8000f3a:	bf18      	it	ne
 8000f3c:	6059      	strne	r1, [r3, #4]
 8000f3e:	6863      	ldr	r3, [r4, #4]
 8000f40:	bf08      	it	eq
 8000f42:	6031      	streq	r1, [r6, #0]
 8000f44:	5162      	str	r2, [r4, r5]
 8000f46:	604b      	str	r3, [r1, #4]
 8000f48:	4638      	mov	r0, r7
 8000f4a:	f104 060b 	add.w	r6, r4, #11
 8000f4e:	f000 f8cf 	bl	80010f0 <__malloc_unlock>
 8000f52:	f026 0607 	bic.w	r6, r6, #7
 8000f56:	1d23      	adds	r3, r4, #4
 8000f58:	1af2      	subs	r2, r6, r3
 8000f5a:	d0b6      	beq.n	8000eca <_malloc_r+0x22>
 8000f5c:	1b9b      	subs	r3, r3, r6
 8000f5e:	50a3      	str	r3, [r4, r2]
 8000f60:	e7b3      	b.n	8000eca <_malloc_r+0x22>
 8000f62:	6862      	ldr	r2, [r4, #4]
 8000f64:	42a3      	cmp	r3, r4
 8000f66:	bf0c      	ite	eq
 8000f68:	6032      	streq	r2, [r6, #0]
 8000f6a:	605a      	strne	r2, [r3, #4]
 8000f6c:	e7ec      	b.n	8000f48 <_malloc_r+0xa0>
 8000f6e:	4623      	mov	r3, r4
 8000f70:	6864      	ldr	r4, [r4, #4]
 8000f72:	e7b2      	b.n	8000eda <_malloc_r+0x32>
 8000f74:	4634      	mov	r4, r6
 8000f76:	6876      	ldr	r6, [r6, #4]
 8000f78:	e7b9      	b.n	8000eee <_malloc_r+0x46>
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4638      	mov	r0, r7
 8000f80:	f000 f8b6 	bl	80010f0 <__malloc_unlock>
 8000f84:	e7a1      	b.n	8000eca <_malloc_r+0x22>
 8000f86:	6025      	str	r5, [r4, #0]
 8000f88:	e7de      	b.n	8000f48 <_malloc_r+0xa0>
 8000f8a:	bf00      	nop
 8000f8c:	20000088 	.word	0x20000088

08000f90 <_sbrk_r>:
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	4d06      	ldr	r5, [pc, #24]	; (8000fac <_sbrk_r+0x1c>)
 8000f94:	2300      	movs	r3, #0
 8000f96:	4604      	mov	r4, r0
 8000f98:	4608      	mov	r0, r1
 8000f9a:	602b      	str	r3, [r5, #0]
 8000f9c:	f7ff fb30 	bl	8000600 <_sbrk>
 8000fa0:	1c43      	adds	r3, r0, #1
 8000fa2:	d102      	bne.n	8000faa <_sbrk_r+0x1a>
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	b103      	cbz	r3, 8000faa <_sbrk_r+0x1a>
 8000fa8:	6023      	str	r3, [r4, #0]
 8000faa:	bd38      	pop	{r3, r4, r5, pc}
 8000fac:	20000090 	.word	0x20000090

08000fb0 <__sread>:
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb8:	f000 f8a0 	bl	80010fc <_read_r>
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	bfab      	itete	ge
 8000fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8000fc4:	181b      	addge	r3, r3, r0
 8000fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fca:	bfac      	ite	ge
 8000fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fce:	81a3      	strhlt	r3, [r4, #12]
 8000fd0:	bd10      	pop	{r4, pc}

08000fd2 <__swrite>:
 8000fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd6:	461f      	mov	r7, r3
 8000fd8:	898b      	ldrh	r3, [r1, #12]
 8000fda:	05db      	lsls	r3, r3, #23
 8000fdc:	4605      	mov	r5, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	4616      	mov	r6, r2
 8000fe2:	d505      	bpl.n	8000ff0 <__swrite+0x1e>
 8000fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	2200      	movs	r2, #0
 8000fec:	f000 f868 	bl	80010c0 <_lseek_r>
 8000ff0:	89a3      	ldrh	r3, [r4, #12]
 8000ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ffa:	81a3      	strh	r3, [r4, #12]
 8000ffc:	4632      	mov	r2, r6
 8000ffe:	463b      	mov	r3, r7
 8001000:	4628      	mov	r0, r5
 8001002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001006:	f000 b817 	b.w	8001038 <_write_r>

0800100a <__sseek>:
 800100a:	b510      	push	{r4, lr}
 800100c:	460c      	mov	r4, r1
 800100e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001012:	f000 f855 	bl	80010c0 <_lseek_r>
 8001016:	1c43      	adds	r3, r0, #1
 8001018:	89a3      	ldrh	r3, [r4, #12]
 800101a:	bf15      	itete	ne
 800101c:	6560      	strne	r0, [r4, #84]	; 0x54
 800101e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001026:	81a3      	strheq	r3, [r4, #12]
 8001028:	bf18      	it	ne
 800102a:	81a3      	strhne	r3, [r4, #12]
 800102c:	bd10      	pop	{r4, pc}

0800102e <__sclose>:
 800102e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001032:	f000 b813 	b.w	800105c <_close_r>
	...

08001038 <_write_r>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4d07      	ldr	r5, [pc, #28]	; (8001058 <_write_r+0x20>)
 800103c:	4604      	mov	r4, r0
 800103e:	4608      	mov	r0, r1
 8001040:	4611      	mov	r1, r2
 8001042:	2200      	movs	r2, #0
 8001044:	602a      	str	r2, [r5, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	f7ff fa89 	bl	800055e <_write>
 800104c:	1c43      	adds	r3, r0, #1
 800104e:	d102      	bne.n	8001056 <_write_r+0x1e>
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	b103      	cbz	r3, 8001056 <_write_r+0x1e>
 8001054:	6023      	str	r3, [r4, #0]
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	20000090 	.word	0x20000090

0800105c <_close_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4d06      	ldr	r5, [pc, #24]	; (8001078 <_close_r+0x1c>)
 8001060:	2300      	movs	r3, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	602b      	str	r3, [r5, #0]
 8001068:	f7ff fa95 	bl	8000596 <_close>
 800106c:	1c43      	adds	r3, r0, #1
 800106e:	d102      	bne.n	8001076 <_close_r+0x1a>
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	b103      	cbz	r3, 8001076 <_close_r+0x1a>
 8001074:	6023      	str	r3, [r4, #0]
 8001076:	bd38      	pop	{r3, r4, r5, pc}
 8001078:	20000090 	.word	0x20000090

0800107c <_fstat_r>:
 800107c:	b538      	push	{r3, r4, r5, lr}
 800107e:	4d07      	ldr	r5, [pc, #28]	; (800109c <_fstat_r+0x20>)
 8001080:	2300      	movs	r3, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	602b      	str	r3, [r5, #0]
 800108a:	f7ff fa90 	bl	80005ae <_fstat>
 800108e:	1c43      	adds	r3, r0, #1
 8001090:	d102      	bne.n	8001098 <_fstat_r+0x1c>
 8001092:	682b      	ldr	r3, [r5, #0]
 8001094:	b103      	cbz	r3, 8001098 <_fstat_r+0x1c>
 8001096:	6023      	str	r3, [r4, #0]
 8001098:	bd38      	pop	{r3, r4, r5, pc}
 800109a:	bf00      	nop
 800109c:	20000090 	.word	0x20000090

080010a0 <_isatty_r>:
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	4d06      	ldr	r5, [pc, #24]	; (80010bc <_isatty_r+0x1c>)
 80010a4:	2300      	movs	r3, #0
 80010a6:	4604      	mov	r4, r0
 80010a8:	4608      	mov	r0, r1
 80010aa:	602b      	str	r3, [r5, #0]
 80010ac:	f7ff fa8f 	bl	80005ce <_isatty>
 80010b0:	1c43      	adds	r3, r0, #1
 80010b2:	d102      	bne.n	80010ba <_isatty_r+0x1a>
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	b103      	cbz	r3, 80010ba <_isatty_r+0x1a>
 80010b8:	6023      	str	r3, [r4, #0]
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
 80010bc:	20000090 	.word	0x20000090

080010c0 <_lseek_r>:
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	4d07      	ldr	r5, [pc, #28]	; (80010e0 <_lseek_r+0x20>)
 80010c4:	4604      	mov	r4, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4611      	mov	r1, r2
 80010ca:	2200      	movs	r2, #0
 80010cc:	602a      	str	r2, [r5, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	f7ff fa88 	bl	80005e4 <_lseek>
 80010d4:	1c43      	adds	r3, r0, #1
 80010d6:	d102      	bne.n	80010de <_lseek_r+0x1e>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	b103      	cbz	r3, 80010de <_lseek_r+0x1e>
 80010dc:	6023      	str	r3, [r4, #0]
 80010de:	bd38      	pop	{r3, r4, r5, pc}
 80010e0:	20000090 	.word	0x20000090

080010e4 <__malloc_lock>:
 80010e4:	4801      	ldr	r0, [pc, #4]	; (80010ec <__malloc_lock+0x8>)
 80010e6:	f7ff be0b 	b.w	8000d00 <__retarget_lock_acquire_recursive>
 80010ea:	bf00      	nop
 80010ec:	20000084 	.word	0x20000084

080010f0 <__malloc_unlock>:
 80010f0:	4801      	ldr	r0, [pc, #4]	; (80010f8 <__malloc_unlock+0x8>)
 80010f2:	f7ff be06 	b.w	8000d02 <__retarget_lock_release_recursive>
 80010f6:	bf00      	nop
 80010f8:	20000084 	.word	0x20000084

080010fc <_read_r>:
 80010fc:	b538      	push	{r3, r4, r5, lr}
 80010fe:	4d07      	ldr	r5, [pc, #28]	; (800111c <_read_r+0x20>)
 8001100:	4604      	mov	r4, r0
 8001102:	4608      	mov	r0, r1
 8001104:	4611      	mov	r1, r2
 8001106:	2200      	movs	r2, #0
 8001108:	602a      	str	r2, [r5, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	f7ff fa0a 	bl	8000524 <_read>
 8001110:	1c43      	adds	r3, r0, #1
 8001112:	d102      	bne.n	800111a <_read_r+0x1e>
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	b103      	cbz	r3, 800111a <_read_r+0x1e>
 8001118:	6023      	str	r3, [r4, #0]
 800111a:	bd38      	pop	{r3, r4, r5, pc}
 800111c:	20000090 	.word	0x20000090

08001120 <_init>:
 8001120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001122:	bf00      	nop
 8001124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001126:	bc08      	pop	{r3}
 8001128:	469e      	mov	lr, r3
 800112a:	4770      	bx	lr

0800112c <_fini>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr
